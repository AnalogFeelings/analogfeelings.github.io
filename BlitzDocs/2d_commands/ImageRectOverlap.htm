<html>

<head>
    <link rel=stylesheet href=../css/commands.css type=text/css>
</head>

<body>
    <h1>ImageRectOverlap (image,x,y,rect x,rect y,rect width,rect height)</h1>
    <h1>Parameters</h1>
    <table>
        <tr>
            <td>
                image = Image to test collision against
                <br />
                x = image's x location
                <br />
                y = image's y location
                <br />
                rect x = x location start of the rect to test
                <br />
                rect y = y location start of the rect
                <br />
                rect width = width of the rect
                <br />
                rect height = height of the rect
            </td>
        </tr>
    </table>
    <h1>Description</h1>
    <table>
        <tr>
            <td>
                There are many times when you need to see if an image has collided with (or is touching) a specific
                rectangular area of the screen. This command performs a collision detection between the image of your
                choice and a specified rectangle on the screen. Transparent pixels are ignored during the collision
                process, making this command a bit inaccurate for odd shaped graphics. See ImageRectCollide for pixel
                perfect collisions between an image and rectangular area of the screen.

                <br />

                <br />
                The usefulness of this comes into play when you think of a game like Monkey Island - when you might have
                a backdrop on the screen showing a room that has items in it the player can interact with using a mouse
                pointer graphic. In some cases, the items on the screen you wish to interact with will be seperate
                (often animated or moving) images of their own. For this situation, you would be better off using
                ImagesCollide or ImagesOverlap to detect the collision between pointer graphic and the image.

                <br />

                <br />
                Howevever, should your program just need to detect a graphic (like a mouse pointer) over at a particular
                location/region of the screen (often called a 'hot spot'), this command works great!

                <br />

                <br />
                As with any collision in Blitz, you will need to know the PRECISE location of the graphic you wish to
                test collision with, as well as the x, y, width, and height of the screen area (rect) you wish to test.

                <br />

                <br />
                The example blatently uses graphics that are much smaller than their container to show you how
                inaccurate this command can really be - if not used carefully. The ImageRectCollide example is identical
                to this one - and shows how accurate the pixel-perfect collision method can be with graphics of this
                nature.
            </td>
        </tr>
    </table>
    <h1><a href=../2d_examples/ImageRectOverlap.bb>Example</a></h1>
    <table>
        <tr>
            <td>
                ; ImageRectOverlap Example
                <br />

                <br />
                ; Turn on graphics mode
                <br />
                Graphics 640,480,16
                <br />

                <br />
                ; Create new empty graphic to store our circle in
                <br />
                gfxCircle=CreateImage(50,50)
                <br />

                <br />
                ; Draw the circle image
                <br />
                ; Set drawing operations to point to our new empty graphic
                <br />
                SetBuffer ImageBuffer(gfxCircle)
                <br />
                Color 255,0,0
                <br />
                ; Note the extra space between the circle and the edge of the graphic
                <br />
                Oval 10,10,30,30,1
                <br />

                <br />
                ; Let's not forget to put the drawing buffer back!
                <br />
                SetBuffer BackBuffer()
                <br />
                Color 0,0,255
                <br />

                <br />
                ; Locate our box to a random, visible screen location
                <br />
                hotX=Rnd(50,610)
                <br />
                hotY=Rnd(50,430)
                <br />
                hotW=Rnd(20,100)
                <br />
                hotH=Rnd(20,100)
                <br />

                <br />
                ; Repeat the loop until we've had a collision
                <br />
                Repeat
                <br />
                ; Attach our mouse to the circle to move it
                <br />
                circleX=MouseX()
                <br />
                circleY=MouseY()
                <br />
                ; Standard double buffer technique; clear screen first
                <br />
                Cls
                <br />
                ; Draw our rectangle
                <br />
                Rect hotX,hotY,hotW,hotH,0
                <br />
                DrawImage gfxCircle,circleX,circleY
                <br />
                ; Standard double buffer technique; flip after all drawing is done
                <br />
                Flip
                <br />
                ; We test the locations of our rectangle area and circle to see if they have overlapped
                <br />
                Until ImageRectOverlap (gfxCircle,circleX,circleY,hotX,hotY,hotW,hotH)
                <br />

                <br />
                ; Loop is over, we must've collided!
                <br />
                Text 0,0, "WE'VE HAD A COLLISION! PRESS A MOUSE BUTTON"
                <br />
                ; Can't see the text until we flip ..
                <br />
                Flip
                <br />
                ; Wait for a mouse click
                <br />
                WaitMouse()
                <br />
                ; End our graphics mode
                <br />
                EndGraphics
                <br />

            </td>
        </tr>
    </table>
    <br>
    <a target=_top href=../index.htm>Index</a><br>
</body>

</html>